<html lang="en">
    <head>
        <title>WebGL/GLSL - SkyBox with sphere map</title>
        <meta charset="utf-8">
    </head>

    <body>
        <div id="container"></div>
    </body>

    <script src="../js/Three.min.js"></script>
    <script src="../js/OrbitControls.js"></script>
    <script src="../js/Prototype.js"></script>
    <script src="../js/NoiseRTT.js"></script>
    <script src="../js/NormalsRTT.js"></script>
    <script src="../js/AOcclusionRTT.js"></script>

    <script type="x-shader/x-vertex" id="noiseVertexShader">
        // Vertex Shader code

        void main() {
            gl_Position = vec4(position.xy, 0.0, 1.0);
        }
    </script>

    <script type="x-shader/x-fragment" id="noiseFragmentShader">
        // Fragment Shader code

        uniform float seed;
        uniform vec2 uvScale;
        uniform vec2 offset;

        //
        // GLSL textureless classic 2D noise "cnoise".
        // Author:  Stefan Gustavson (stefan.gustavson@liu.se)
        // Version: 2011-08-22
        //
        // Many thanks to Ian McEwan of Ashima Arts for the
        // ideas for permutation and gradient selection.
        //
        // Copyright (c) 2011 Stefan Gustavson. All rights reserved.
        // Distributed under the MIT license. See LICENSE file.
        // https://github.com/ashima/webgl-noise
        //

        vec4 mod289(vec4 x) {
            return x - floor(x * (1.0 / 289.0)) * 289.0;
        }

        vec4 permute(vec4 x) {
            return mod289(((x*34.0)+1.0)*x);
        }

        vec4 taylorInvSqrt(vec4 r) {
            return 1.79284291400159 - 0.85373472095314 * r;
        }

        vec2 fade(vec2 t) {
            return t*t*t*(t*(t*6.0-15.0)+10.0);
        }

        // Classic Perlin noise
        float pnoise(vec2 P) {
            vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
            vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
            Pi = mod289(Pi); // To avoid truncation effects in permutation
            vec4 ix = Pi.xzxz;
            vec4 iy = Pi.yyww;
            vec4 fx = Pf.xzxz;
            vec4 fy = Pf.yyww;

            vec4 i = permute(permute(ix) + iy) + seed;

            vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
            vec4 gy = abs(gx) - 0.5 ;
            vec4 tx = floor(gx + 0.5);
            gx = gx - tx;

            vec2 g00 = vec2(gx.x,gy.x);
            vec2 g10 = vec2(gx.y,gy.y);
            vec2 g01 = vec2(gx.z,gy.z);
            vec2 g11 = vec2(gx.w,gy.w);

            vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
            g00 *= norm.x;
            g01 *= norm.y;
            g10 *= norm.z;
            g11 *= norm.w;

            float n00 = dot(g00, vec2(fx.x, fy.x));
            float n10 = dot(g10, vec2(fx.y, fy.y));
            float n01 = dot(g01, vec2(fx.z, fy.z));
            float n11 = dot(g11, vec2(fx.w, fy.w));

            vec2 fade_xy = fade(Pf.xy);
            vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
            float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
            return 2.3 * n_xy;
        }

        // fractional brownian motion, also called turbulence
        float fBm(vec2 v, float lacunarity, float gain) {
            float sum = 0.0;
            float amp = 1.0;
            vec2 V = v;

            // 6 octaves of noise
            for(int i = 0; i < 6; i++) {
                sum += amp * pnoise(V);
                amp *= gain;
                V *= lacunarity;
            }
            return sum;
        }

        void main() {
            vec2 uv = (gl_FragCoord.xy + offset) * uvScale;
            float h = fBm(uv, 2.0, 0.5);
            gl_FragColor = vec4(vec3(0.0), 0.5 + 0.4 * h);
        }
    </script>

    <script type="x-shader/x-vertex" id="normalVertexShader">
        // Vertex Shader code

        void main() {
            gl_Position = vec4(position.xy, 0.0, 1.0);
        }
    </script>

    <script type="x-shader/x-fragment" id="normalFragmentShader">
        // Fragment Shader code

        uniform sampler2D heightmapTexture;
        uniform vec2 uvScale;

        // This can be used to control how pronounced the bumps are:
        // less than 1.0 smoothes and greater than 1.0 enhances.
        uniform float strength;

        float getHeight(float x, float y) {
            vec2 uv = (gl_FragCoord.xy + vec2(x, y)) * uvScale;
            return texture2D(heightmapTexture, uv).a;
        }

        void main() {
            // Using Scharr operator to generate normal which is an improvement:
            // of Sobel operator: http://en.wikipedia.org/wiki/Sobel_operator
            // The sobel filter requires the eight samples surrounding the current
            // pixel (like moore neighborhood).
            float tl = getHeight(-1.0, -1.0);   // top left
            float  l = getHeight(-1.0,  0.0);   // left
            float bl = getHeight(-1.0,  1.0);   // bottom left
            float  t = getHeight( 0.0, -1.0);   // top
            float  b = getHeight( 0.0,  1.0);   // bottom
            float tr = getHeight( 1.0, -1.0);   // top right
            float  r = getHeight( 1.0,  0.0);   // right
            float br = getHeight( 1.0,  1.0);   // bottom right

            // Compute dx using Scharr, X kernel is:
            //   [ - 3 0  3 ]
            //   [ -10 0 10 ]
            //   [ - 3 0  3 ]
            float dX = 3.0 * tr + 10.0 * r + 3.0 * br - 3.0 * tl - 10.0 * l - 3.0 * bl;

            // Compute dy using Scharr, Y kernel is:
            //   [ -3 -10 -3 ]
            //   [  0   0  0 ]
            //   [  3  10  3 ]
            float dY = 3.0 * bl + 10.0 * b + 3.0 * br - 3.0 * tl - 10.0 * t - 3.0 * tr;

            // Generate the missing Z component: G = sqrt(dx^2 + dy^2)
            float dZ = sqrt(dX * dX + dY * dY) / strength;

            // Stores normals in rgb and height in alpha
            gl_FragColor = vec4(normalize(vec3(dX, dY, dZ)) * 0.5 + 0.5, getHeight(0.0, 0.0));
        }
    </script>

    <script type="x-shader/x-vertex" id="aocclusionVertexShader">
        // Vertex Shader code

        void main() {
            gl_Position = vec4(position.xy, 0.0, 1.0);
        }
    </script>

    <script type="x-shader/x-fragment" id="aocclusionFragmentShader">
        // Fragment Shader code

        //
        // The basic idea in this fragment shader is to build an ambient
        // occlusion map but based on the heightmap rather than in screen
        // space (SSAO). This shader works with a sampling kernel of 32
        // samples positions in the fragment neighborhood.
        // At each sampled position, the light direction is calculated
        // to get the magnitude of the diffusely reflected light.
        //

        uniform sampler2D normalsTexture;
        uniform vec2 uvScale;

        // The sampling kernel
        uniform vec2 kernel[32];
        // The kernel sample radius
        uniform float kernelRadius;
        // Occluder bias to minimize self-occlusion.
        uniform float occluderBias;

        vec3 getSample(vec2 pos) {
            vec2 uv = (gl_FragCoord.xy + pos) * uvScale;
            float height = texture2D(normalsTexture, uv).a;
            // rescale sample height in the range [-1.0 - 1.0]
            return vec3(uv.x, uv.y, height * 2.0 - 1.0);
        }

        void main() {
            // We need to construct a change-of-basis matrix to reorient our sample kernel
            // along the origin's normal.
            // Uses Gram-Schmidt process (http://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process)
            // to compute an orthogonal basis (TBN).
            //
            // Since the data in the normal map has to be stored in the range [0.0 - 1.0], we need to
            // rescale it back to its original [-1.0 - 1.0] range.
            vec3 normal = normalize(texture2D(normalsTexture, gl_FragCoord.xy * uvScale).rgb * 2.0 - 1.0);
            vec3 tangent = normalize(cross(normal, vec3(0.0, 0.0, 1.0)));
            vec3 bitangent = normalize(cross(normal, tangent));
            mat3 TBN = mat3(tangent, bitangent, normal);

            float occlusion = 0.0;
            // Get the position for this fragment
            vec3 origin = getSample(vec2(0.0));
            for(int i = 0; i < 32; i++) {
                // Get a sample around the fragment using the kernel
                vec3 sample = getSample(vec2(TBN * vec3(kernel[i], 0.0) * kernelRadius));
                vec3 lightDirection = sample - origin;
                // Calculate ambient occlusion amount between these two points
                // It is simular to diffuse lighting. Objects closer to the fragment cast
                // the hardest shadow and objects closer to the horizon have minimal effect.
                // We can take a dot product of the normal map normal and the light direction
                // to get the magnitude of the diffusely reflected light or lambert value.
                // http://en.wikipedia.org/wiki/Lambertian_reflectance
                float lambert = max(0.0, dot(normal, normalize(lightDirection)) - occluderBias);
                // Attenuate the occlusion, similar to how you attenuate a light source.
                // The further the distance between points, the less effect AO has on the fragment.
                float attenuation = 0.25 / sqrt(length(lightDirection));
                occlusion += lambert * attenuation;
            }
            // Average and clamp ambient occlusion
            occlusion = clamp(occlusion / 32.0, 0.0, 1.0);
            gl_FragColor = vec4(vec3(0.0), 1.0 - occlusion);
        }
    </script>

    <script type="x-shader/x-vertex" id="displayVertexShader">
        // Vertex Shader code

        uniform sampler2D normalsTexture;
        uniform sampler2D aocclusionTexture;
        varying float h;
        varying vec3 n;
        varying float o;
        varying vec2 vUV;

        void main() {
            // lookup for height on the normal texture, taking alpha channel.
            h = texture2D(normalsTexture, uv).a;

            // lookup for normal on the normal texture.
            n = texture2D(normalsTexture, uv).rgb;

            // lookup for AO on the occlusion texture, taking alpha channel.
            o = texture2D(aocclusionTexture, uv).a;

            // apply a factor to get displacement
            float displacement = h * 50.0;
            // displace the vertex
            vec3 newPosition = vec3(position.x, position.y, position.z + displacement);
            gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);
            vUV = uv;
        }
    </script>

    <script type="x-shader/x-fragment" id="displayFragmentShader">
        // Fragment Shader code

        uniform sampler2D rockTexture;
        uniform sampler2D rockNormalsTexture;
        uniform float rockTextureScale;
        uniform float time;

        varying float h;
        varying vec3 n;
        varying float o;
        varying vec2 vUV;

        // Lighting is done by Spherical Harmonics:
        // http://en.wikipedia.org/wiki/Spherical_harmonics
        // This is a cheap lighting method presented in 2001 by Ravi Ramamoorthi
        // and Pat Hanrahan: http://graphics.stanford.edu/papers/envmap/
        // There's a C program (prefilter.c) provided to compute spherical harmonic
        // coefficients from light probe images (in the floating point format).
        // I used pvalue tool from Radiance package on my Ubuntu system to convert
        // angular light probe images in HDR format to floating point format with
        // the following command:
        // $ pvalue -df -H -h probe_file.hdr > probe_file.float
        // I then have slightly modified prefilter.c to output values with a factor
        // applied to have coefficients in a correct range, and ran the following
        // command:
        // $ ./prefilter probe_file.float 640
        // You can read too the Orange Book, chapter 12.3 (OpenGL Shading Language
        // by Randi J. Rost), it has been very useful.
        struct SHCoefficients {
            vec3 L00, L1m1, L10, L11, L2m2, L2m1, L20, L21, L22;
        };

        // These constants have been calculated with a light probe from this website:
        // http://www.pauldebevec.com/Probes/
        // The light probe is called "Campus at Sunset" on the website.
        SHCoefficients campus = SHCoefficients(
            vec3(  0.7870665,  0.9379944,  0.9799986 ),
            vec3(  0.4376419,  0.5579443,  0.7024107 ),
            vec3( -0.1020717, -0.1824865, -0.2749662 ),
            vec3(  0.4543814,  0.3750162,  0.1968642 ),
            vec3(  0.1841687,  0.1396696,  0.0491580 ),
            vec3( -0.1417495, -0.2186370, -0.3132702 ),
            vec3( -0.3890121, -0.4033574, -0.3639718 ),
            vec3(  0.0872238,  0.0744587,  0.0353051 ),
            vec3(  0.6662600,  0.6706794,  0.5246173 )
        );

        vec3 getDiffuseColor(vec3 normal, SHCoefficients c, float scale) {
            const float C1 = 0.429043;
            const float C2 = 0.511664;
            const float C3 = 0.743125;
            const float C4 = 0.886227;
            const float C5 = 0.247708;
            return (
                C1 * c.L22 * (normal.x * normal.x - normal.y * normal.y) +
                C3 * c.L20 * normal.z * normal.z +
                C4 * c.L00 -
                C5 * c.L20 +
                2.0 * C1 * c.L2m2 * normal.x * normal.y +
                2.0 * C1 * c.L21  * normal.x * normal.z +
                2.0 * C1 * c.L2m1 * normal.y * normal.z +
                2.0 * C2 * c.L11  * normal.x +
                2.0 * C2 * c.L1m1 * normal.y +
                2.0 * C2 * c.L10  * normal.z
            ) * scale;
        }

        void main() {
            vec3 normal = normalize(n * 2.0 - 1.0);
            vec3 tangent = normalize(cross(normal, vec3(0.0, 0.0, 1.0)));
            vec3 bitangent = normalize(cross(normal, tangent));
            mat3 TBN = mat3(tangent, bitangent, normal);

            // get rock and normal textures
            vec3 rockColor = texture2D(rockTexture, vUV / rockTextureScale).xyz * 0.7;
            vec3 rockNormal = TBN * normalize((texture2D(rockNormalsTexture, vUV / rockTextureScale).xyz * 2.0 - 1.0) * vec3(1.0, 1.0, 0.7));

            // change light direction with time
            vec3 diffuseLightDir = vec3(1.0 * cos(time), -1.0 * sin(time), 1.0);

            vec3 diffuse = getDiffuseColor(normalize(rockNormal * diffuseLightDir), campus, 1.3) * mix(0.0, 1.0, o);

            // gamma correction
            vec3 gamma = vec3(1.0 / 2.2);
            gl_FragColor = vec4(pow(diffuse * rockColor, gamma), 1.0);
        }
    </script>

    <script type="x-shader/x-vertex" id="skyVertexShader">
        // Vertex Shader code

        varying vec2 vUV;

        void main() {
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
            vUV = uv;
        }
    </script>

    <script type="x-shader/x-fragment" id="skyFragmentShader">
        // Fragment Shader code

        uniform sampler2D skyDomeTexture;
        varying vec2 vUV;

        void main() {
            gl_FragColor = texture2D(skyDomeTexture, vUV);
        }
    </script>

    <script type="text/javascript" id="mainCode">
        var container,
            renderer,
            scene,
            sceneSphere,
            material,
            skyBoxMesh,
            mesh,
            camera,
            cameraSphere,
            fov = 60,
            noiseRTT,
            normalsRTT,
            aocclusionRTT,
            clock = new THREE.Clock();

        window.addEventListener('load', function() {

            // grab the container from the DOM
            container = document.getElementById("container");

            // create the renderer and attach it to the DOM
            renderer = new THREE.WebGLRenderer({
                alpha: true,
                antialias:true
            });
            //renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.autoClear = false;

            container.appendChild(renderer.domElement);

            // create a scene
            scene = new THREE.Scene();
            // create a scene for the sky
            sceneSphere = new THREE.Scene();

            // create a camera the size of the browser window
            camera = new THREE.PerspectiveCamera(
                fov,
                window.innerWidth / window.innerHeight,
                1,
                100000);
            camera.position.set(0, 30, -120);

            // create a camera for the sphere scene
            cameraSphere = new THREE.PerspectiveCamera(
                fov,
                window.innerWidth / window.innerHeight,
                1,
                100000);

            // controls
            controls = new THREE.OrbitControls(camera);
            controls.center.set(0.0, 0.0, 30.0);
            controls.userPanSpeed = 25;

            // add the camera to the main scene
            scene.add(camera);
            // add the sphere camera to the sphere scene
            sceneSphere.add(cameraSphere);

            // initialize noiseRTT
            var sizeX = 256;
            var sizeY = 256;
            var noiseScale = 1.0 / 64.0;
            var seed = 421;
            noiseRTT = new NoiseRTT(sizeX, sizeY, noiseScale, seed);

            // initialize normalsRTT
            normalsRTT = new NormalsRTT(sizeX, sizeY, 1.0, noiseRTT.getTexture());

            // initialize aocclusionRTT
            aocclusionRTT = new AOcclusionRTT(sizeX, sizeY, 10.0, 0.15, normalsRTT.getTexture());

            // material for sky shader
            var skyMaterial = new THREE.ShaderMaterial({
                uniforms: {
                    skyDomeTexture: { type: "t", value: THREE.ImageUtils.loadTexture("skydome.jpg") }
                },
                vertexShader: document.getElementById('skyVertexShader').textContent,
                fragmentShader: document.getElementById('skyFragmentShader').textContent
            });

            // create a sphere geometry for the skydome mesh
            skyBoxMesh = new THREE.Mesh(new THREE.SphereGeometry(3000, 60, 40), skyMaterial);
            skyBoxMesh.scale.set(-1, 1, 1);
            skyBoxMesh.eulerOrder = "XZY";
            skyBoxMesh.renderDepth = 1000.0;

            sceneSphere.add(skyBoxMesh);

            // load terrain textures
            var t = THREE.ImageUtils.loadTexture("12347-v4.jpg");
            t.wrapS = t.wrapT = THREE.RepeatWrapping;
            var tn = THREE.ImageUtils.loadTexture("12347-normal.jpg");
            tn.wrapS = tn.wrapT = THREE.RepeatWrapping;

            // create a shader material
            material = new THREE.ShaderMaterial({
                //wireframe: true,
                uniforms: {
                    normalsTexture: { type: "t", value: normalsRTT.getTexture() },
                    aocclusionTexture: { type: "t", value: aocclusionRTT.getTexture() },
                    rockTexture: { type: "t", value: t },
                    rockNormalsTexture: { type: "t", value: tn },
                    rockTextureScale: { type: "f", value: 1.0 / 16.0 },
                    time: { type: "f", value: 1.0 }
                },
                vertexShader: document.getElementById('displayVertexShader').textContent,
                fragmentShader: document.getElementById('displayFragmentShader').textContent,
                side: THREE.BackSide
            });

            // create a plane mesh and assign the material, then add the mesh to the scene
            mesh = new THREE.Mesh(
                new THREE.PlaneBufferGeometry(256, 256, 256, 256),
                material
            );
            mesh.position.y = 50;
            mesh.rotation.x = Math.PI / 2;
            mesh.scale.set(1.0, 1.0, 1.0)
            scene.add(mesh);

            render();
        });

        function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            cameraSphere.aspect = window.innerWidth / window.innerHeight;
            cameraSphere.updateProjectionMatrix();

            renderer.setSize( window.innerWidth, window.innerHeight );
        }

        function render() {

            var delta = clock.getDelta();

            controls.update(delta);
            cameraSphere.rotation.copy(camera.rotation);

            // render noise to texture
            renderer.setSize(256, 256);
            noiseRTT.render(renderer, 0, 0);

            // render normals and height to texture
            normalsRTT.render(renderer, 0, 0);

            // render ambient occlusion to texture
            aocclusionRTT.render(renderer, 0, 0);

            // render scene
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.render(sceneSphere, cameraSphere);
            renderer.render(scene, camera);

            requestAnimationFrame(render);

            material.uniforms["time"].value = 0.01 * clock.getElapsedTime();
        }
    </script>

</html>
