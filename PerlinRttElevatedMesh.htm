<html lang="en">
    <head>
        <title>WebGL/GLSL - Perlin render to texture mesh</title>
        <meta charset="utf-8">
    </head>

    <body>
        <div id="container"></div>
    </body>

    <script src="js/Three.min.js"></script>
    <script src="js/OrbitControls.js"></script>
    <script src="js/Prototype.js"></script>
    <script src="js/NoiseRTT.js"></script>

    <script type="x-shader/x-vertex" id="noiseVertexShader">
        // Vertex Shader code

        varying vec2 v_texCoord2D;

        void main() {
            gl_Position = vec4(position.xy, 0.0, 1.0);
            v_texCoord2D = position.xy;
        }
    </script>

    <script type="x-shader/x-fragment" id="noiseFragmentShader">
        // Fragment Shader code

        uniform float seed;
        uniform vec2 uvScale;
        uniform vec2 offset;

        varying vec2 v_texCoord2D;

        //
        // GLSL textureless classic 3D noise "pnoise".
        // Author:  Stefan Gustavson (stefan.gustavson@liu.se)
        // Version: 2011-10-11
        //
        // Many thanks to Ian McEwan of Ashima Arts for the
        // ideas for permutation and gradient selection.
        //
        // Copyright (c) 2011 Stefan Gustavson. All rights reserved.
        // Distributed under the MIT license. See LICENSE file.
        // https://github.com/ashima/webgl-noise
        //

        vec3 mod289(vec3 x) {
            return x - floor(x * (1.0 / 289.0)) * 289.0;
        }

        vec4 mod289(vec4 x) {
            return x - floor(x * (1.0 / 289.0)) * 289.0;
        }

        vec4 permute(vec4 x) {
            return mod289(((x * 34.0) + 1.0) * x);
        }

        vec4 taylorInvSqrt(vec4 r) {
            return 1.79284291400159 - 0.85373472095314 * r;
        }

        vec3 fade(vec3 t) {
            return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
        }

        // Classic Perlin noise
        float pnoise(vec3 P) {
            vec3 Pi0 = floor(P); // Integer part for indexing
            vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
            Pi0 = mod289(Pi0);
            Pi1 = mod289(Pi1);
            vec3 Pf0 = fract(P); // Fractional part for interpolation
            vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
            vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
            vec4 iy = vec4(Pi0.yy, Pi1.yy);
            vec4 iz0 = Pi0.zzzz;
            vec4 iz1 = Pi1.zzzz;

            vec4 ixy = permute(permute(ix) + iy);
            vec4 ixy0 = permute(ixy + iz0);
            vec4 ixy1 = permute(ixy + iz1);

            vec4 gx0 = ixy0 * (1.0 / 7.0);
            vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
            gx0 = fract(gx0);
            vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
            vec4 sz0 = step(gz0, vec4(0.0));
            gx0 -= sz0 * (step(0.0, gx0) - 0.5);
            gy0 -= sz0 * (step(0.0, gy0) - 0.5);

            vec4 gx1 = ixy1 * (1.0 / 7.0);
            vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
            gx1 = fract(gx1);
            vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
            vec4 sz1 = step(gz1, vec4(0.0));
            gx1 -= sz1 * (step(0.0, gx1) - 0.5);
            gy1 -= sz1 * (step(0.0, gy1) - 0.5);

            vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
            vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
            vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
            vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
            vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
            vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
            vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
            vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

            vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
            g000 *= norm0.x;
            g010 *= norm0.y;
            g100 *= norm0.z;
            g110 *= norm0.w;
            vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
            g001 *= norm1.x;
            g011 *= norm1.y;
            g101 *= norm1.z;
            g111 *= norm1.w;

            float n000 = dot(g000, Pf0);
            float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
            float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
            float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
            float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
            float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
            float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
            float n111 = dot(g111, Pf1);

            vec3 fade_xyz = fade(Pf0);
            vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
            vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
            float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
            return 2.2 * n_xyz;
        }

        // fractional brownian motion, also called turbulence
        float fBm(vec3 v, float lacunarity, float gain) {
            float sum = 0.0;
            float amp = 1.0;
            vec3 V = v;

            // 6 octaves of noise
            for(int i = 0; i < 6; i++) {
                sum += amp * pnoise(V);
                amp *= gain;
                V *= lacunarity;
            }
            return sum;
        }

        void main() {
            vec2 uv = (v_texCoord2D + offset) * uvScale;
            float h = fBm(vec3(uv, seed), 2.0, 0.5);
            // height noise is stored on alpha channel
            gl_FragColor = vec4(vec3(0.0), 0.5 + 0.5 * h);
        }
    </script>

    <script type="x-shader/x-vertex" id="displayVertexShader">
        // Vertex Shader code

        uniform sampler2D heightmapTexture;
        varying float height;

        void main() {
            // lookup for height on the texture map, taking alpha channel as height.
            height = texture2D(heightmapTexture, uv).a;
            // apply a factor to get displacement
            float displacement = height * 1500.0;
            // displace the vertex
            vec3 newPosition = vec3(position.x, position.y, position.z + displacement);
            gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);
        }
    </script>

    <script type="x-shader/x-fragment" id="displayFragmentShader">
        // Fragment Shader code

        varying float height;

        void main() {
            gl_FragColor = vec4(0.0, 0.0, height, 1.0);
        }
    </script>

    <script type="text/javascript" id="mainCode">
        var container,
            renderer,
            scene,
            material,
            mesh,
            camera,
            fov = 60,
            noiseRTT,
            clock = new THREE.Clock();

        window.addEventListener('load', function() {

            // grab the container from the DOM
            container = document.getElementById("container");

            // create the renderer and attach it to the DOM
            renderer = new THREE.WebGLRenderer();
            renderer.setPixelRatio(window.devicePixelRatio);
            // set a black background color
            renderer.setClearColor(0);

            container.appendChild(renderer.domElement);

            // create a scene
            scene = new THREE.Scene();

            // create axis helpers and add them to the scene
            var axes = new THREE.AxisHelper(200);
            scene.add(axes);

            // create a camera the size of the browser window
            camera = new THREE.PerspectiveCamera(
                fov,
                window.innerWidth / window.innerHeight,
                1,
                20000);
            camera.position.y = -4000;
            camera.position.z = 3500;

            // controls
            controls = new THREE.OrbitControls(camera);
            controls.center.set(0.0, 100.0, 0.0);
            controls.userPanSpeed = 100;

            // add the camera to the scene
            scene.add(camera);

            // initialize noiseRTT
            var sizeX = 256;
            var sizeY = 256;
            var noiseScale = 2.0;
            var seed = 654321;
            noiseRTT = new NoiseRTT(sizeX, sizeY, noiseScale, seed);

            // create a shader material
            material = new THREE.ShaderMaterial({
                wireframe: true,
                uniforms: {
                    heightmapTexture: { type: "t", value: noiseRTT.getTexture() },
                },
                vertexShader: document.getElementById('displayVertexShader').textContent,
                fragmentShader: document.getElementById('displayFragmentShader').textContent
            });

            // create a plane mesh and assign the material, then add the mesh to the scene
            mesh = new THREE.Mesh(
                new THREE.PlaneBufferGeometry(6000, 6000, 256, 256),
                material
            );
            scene.add(mesh);

            render();
        });

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize( window.innerWidth, window.innerHeight );
        }

        function render() {
            controls.update(clock.getDelta());

            // render noise to texture
            renderer.setSize(256, 256);
            noiseRTT.render(renderer, 0, 0);

            // render scene
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.render(scene, camera);

            requestAnimationFrame(render);
        }
    </script>

</html>
