{"name":"Glsl-playground","tagline":"GLSL shaders for procedural terrain generation directly on the GPU.","body":"# GLSL-playground\r\nGLSL shaders for procedural terrain generation directly on the GPU.\r\n\r\nRecently I became highly interested in procedural landscape generation, and especially with what\r\nyou can do directly on a modern GPU using shaders. My goal is to achieve some procedural landscape\r\ngeneration demos using only a minimal texture set and using procedural textures everywhere it's\r\npossible.\r\n\r\nHere's what have been done already:\r\n - height mapping (with procedural noise texture, Perlin, Simplex, etc...)\r\n - normal mapping (Sobel and Scharr operator)\r\n - ambient occlusion (not SSAO, but rather based on heightmap)\r\n - lighting (spherical harmonics)\r\n - skybox (cube and sphere map)\r\n - pixel shader demos (full screen quad geometry)\r\n\r\nThe demos are using three.js, a JavaScript 3D Library which makes WebGL simpler:\r\nhttp://threejs.org\r\n\r\nSome other very useful resources that were used:\r\n - Iñigo Quílez articles: http://www.iquilezles.org/www/index.htm\r\n - Giliam de Carpentier articles: http://www.decarpentier.nl/scape-procedural-basics\r\n - Florian Boesch articles on codeflow: http://codeflow.org/\r\n - John Chapman tutorial on SSAO: http://john-chapman-graphics.blogspot.fr/2013/01/ssao-tutorial.html\r\n - Nutty Software articles: http://www.nutty.ca/\r\n - Ravi Ramamoorthi and Pat Hanrahan paper on lighting: http://graphics.stanford.edu/papers/envmap/\r\n - Randi J. Rost Orange Book on OpenGL Shading Language\r\n - Ashima Arts noise for WebGL: https://github.com/ashima/webgl-noise\r\n - Light probe images: http://www.unparent.com/photos_probes.html\r\n - Prototype.js, an object-oriented Javascript framework: https://github.com/sstephenson/prototype\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}