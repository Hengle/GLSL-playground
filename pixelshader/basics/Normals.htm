<html lang="en">
    <head>
        <title>WebGL/GLSL - Normals (Analytical & Numerical) Pixel Shader</title>
        <meta charset="utf-8">
        <link rel="stylesheet" type="text/css" href="../../css/styles.css">
    </head>

    <body>
        <div id="container"></div>
    </body>

    <script src="../../js/Three.min.js"></script>
    <script src="../../js/Detector.js"></script>

    <script type="x-shader/x-vertex" id="vertexShader">
        // Vertex Shader code

        void main() {
            gl_Position = vec4(position.xy, 1.0, 1.0);
        }
    </script>

    <script type="x-shader/x-fragment" id="fragmentShader">
        // Fragment Shader code

        uniform vec2 uResolution;
        uniform float uGlobalTime;
        uniform vec4 uMouse;
        uniform sampler2D uTexture0;

        vec3 noise(in vec2 p) {
            // value noise: http://en.wikipedia.org/wiki/Value_noise
            // and it's analytical derivatives
            vec2 i = floor(p);
            vec2 f = fract(p);
            float a = 0.5 * texture2D(uTexture0,(i + vec2(0.5, 0.5)) / 256.0, -100.0).x;
            float b = 0.5 * texture2D(uTexture0,(i + vec2(1.5, 0.5)) / 256.0, -100.0).x;
            float c = 0.5 * texture2D(uTexture0,(i + vec2(0.5, 1.5)) / 256.0, -100.0).x;
            float d = 0.5 * texture2D(uTexture0,(i + vec2(1.5, 1.5)) / 256.0, -100.0).x;
            vec2 u = f * f * (3.0 - 2.0 * f);
            return vec3(a + (b - a) * u.x + (c - a) * u.y + (a - b - c + d) * u.x * u.y,
				6.0 * f * (1.0 - f) * (vec2(b - a, c - a) + (a - b - c + d) * u.yx));
        }

        vec4 fBm(in vec2 p) {
            float sum = 0.0;
            float amp = 1.0;
            vec2 dsum = vec2(0.0);
            for(int i = 0; i < 5; i++) {
                vec3 n = noise(p);
                sum += amp * n.x;
                dsum += amp * n.yz;
                amp *= 0.5;
                p *= 2.0;
            }

            // noise scaling
            sum *= 2.0;
            dsum *= 2.0;

            return vec4(sum, normalize(vec3(-dsum.x, 1.0, -dsum.y)));
        }

        vec4 raymarchTerrain(in vec3 ro, in vec3 rd, in float tmin, in float tmax) {
            // terrain marching as explained by Inigo Quilez in his articles:
            // http://www.iquilezles.org/www/articles/terrainmarching/terrainmarching.htm
            float t = tmin;
            vec4 res = vec4(-1.0);
            for (int i = 0; i < 90; i++) {
                vec3 p = ro + rd * t;
                vec4 n = fBm(p.xz);
                float d = p.y - n.x;
                res = vec4(t, n.yzw);
                if (d < (0.001 * t) || t > tmax)
                    break;
                t += (0.001 + n.z) * 0.5 * d;
            }
            return res;
        }

        vec3 getTerrainNormal(in vec3 p) {
            // computes terrain normal with central differences: http://en.wikipedia.org/wiki/Finite_difference
            // the method is explained by Inigo Quilez in his article on terrain marching.
            float eps = 0.1;
            return normalize(vec3(fBm(vec2(p.x - eps, p.z)).x - fBm(vec2(p.x + eps, p.z)).x,
                                  2.0 * eps,
                                  fBm(vec2(p.x, p.z - eps)).x - fBm(vec2(p.x, p.z + eps)).x));
        }

        void main() {
            vec2 p = (-uResolution.xy + 2.0 * gl_FragCoord.xy) / uResolution.y;

            // eye rotation
            vec3 eye = vec3(0.0, 1.0, 2.0);
            vec2 rot = 6.2831 * (vec2(0.0, 0.0) + vec2(1.0, 0.15) * (uMouse.xy - uResolution.xy * 0.25) / uResolution.x);
            eye.yz = cos(rot.y) * eye.yz + sin(rot.y) * eye.zy * vec2(-1.0, 1.0);
            eye.xz = cos(rot.x) * eye.xz + sin(rot.x) * eye.zx * vec2(1.0, -1.0);

            // origin displacement and view direction
            vec3 ro = eye;
            ro.y += 1.5;
            vec3 ta = vec3(0.0, -0.25, 0.0);

            // build camera matrix, I suggest reading the following for camera to world transformation:
            // http://www.cs.toronto.edu/~jepson/csc2503/readings/Camera.pdf (chapter 6.5)
            vec3 cw = normalize(ta - eye);
            vec3 cu = normalize(cross(vec3(0.0, 1.0, 0.0), cw));
            vec3 cv = normalize(cross(cw, cu));
            mat3 cam = mat3(cu, cv, cw);

            // compute ray direction
            vec3 rd = cam * normalize(vec3(p.xy, 1.0));

            // background
            vec3 color = vec3(0.0);

            // terrain marching
            float tmin = 0.1;
            float tmax = 50.0;
            vec4 ter = raymarchTerrain(ro, rd, tmin, tmax);
            float t = ter.x;
            if (t < tmax) {
                if (p.x < 0.0) { // analytical normals on left side
                    vec3 nor = ter.yzw;
                    color = nor;
                } else { // numerically computed normals on right side
                    // get position where the ray has hit
                    vec3 pos = ro + rd * t;
                    vec3 nor = getTerrainNormal(pos);
                    color = nor;
                }
                color *= exp(-0.02 * t * t);
            }

            // the white line
            if (p.x > -0.005 && p.x < 0.005 ) {
                color = vec3(1.0);
            }

            // gamma correction
            vec3 gamma = vec3(1.0 / 2.2);
            gl_FragColor = vec4(pow(color, gamma), 1.0);
        }
    </script>

    <script type="text/javascript" id="mainCode">
        var container,
            renderer,
            scene,
            mesh,
            camera,
            leftMouseButtonDown = false,
            clock = new THREE.Clock();

        window.addEventListener('resize', onWindowResize, false);
        window.addEventListener('load', function() {

            // grab the container from the DOM
            container = document.getElementById("container");

            // create a scene
            scene = new THREE.Scene();

            // create a camera the size of the browser window
            camera = new THREE.PerspectiveCamera(
                90,
                window.innerWidth / window.innerHeight,
                1,
                10000);
            camera.position.z = 200;

            // add the camera to the scene
            scene.add(camera);

            // load noise texture
            var tex0 = THREE.ImageUtils.loadTexture("textures/noise_gray.png");
            tex0.wrapS = tex0.wrapT = THREE.RepeatWrapping;

            // create a shader material
            material = new THREE.ShaderMaterial({
                uniforms: {
                    uResolution: { type:"v2", value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
                    uGlobalTime: { type:"f", value: 1.0 },
                    uMouse: { type:"v4", value: new THREE.Vector4(0, 0, 0, 0) },
                    uTexture0: { type:"t", value: tex0 }
                },
                vertexShader: document.getElementById('vertexShader').textContent,
                fragmentShader: document.getElementById('fragmentShader').textContent,
                depthTest: false
            });

            // create a plane mesh and assign the material, then add the mesh to the scene (fullscreen quad)
            mesh = new THREE.Mesh(
                new THREE.PlaneBufferGeometry(2, 2),
                material
            );
            scene.add(mesh);

            // create the renderer and attach it to the DOM
            if (Detector.webgl)
                renderer = new THREE.WebGLRenderer({
                    alpha: true,
                    antialias:true
                });
            else
                renderer = new THREE.CanvasRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);

            container.appendChild(renderer.domElement);

            document.addEventListener('mousedown', onMouseDown, false);
            document.addEventListener('mouseup', onMouseUp, false);
            document.addEventListener('mousemove', onMouseMove, false);

            render();
        });

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            material.uniforms["uResolution"].value = new THREE.Vector2(window.innerWidth, window.innerHeight);
        }

        function onMouseDown(e) {
            if (e.button === 0) {
                leftMouseButtonDown = true;
            }
            var vec4Mouse = material.uniforms["uMouse"].value;
            vec4Mouse.z = e.clientX;
            vec4Mouse.w = e.clientY;
        }

        function onMouseUp(e) {
            if (e.button === 0) {
                leftMouseButtonDown = false;
            } else {
                var vec4Mouse = material.uniforms["uMouse"].value;
                vec4Mouse.z = 0.0;
                vec4Mouse.w = 0.0;
            }
        }

        function onMouseMove(e) {
            if (leftMouseButtonDown === true) {
                var vec4Mouse = material.uniforms["uMouse"].value;
                vec4Mouse.x = e.clientX;
                vec4Mouse.y = e.clientY;
            }
        }

        function render() {
            material.uniforms["uGlobalTime"].value = clock.getElapsedTime();

            renderer.render(scene, camera);
            requestAnimationFrame(render);
        }
    </script>

</html>
