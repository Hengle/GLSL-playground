<html lang="en">
    <head>
        <title>WebGL/GLSL - Metal Sphere 2 Pixel Shader</title>
        <meta charset="utf-8">
        <link rel="stylesheet" type="text/css" href="../../css/styles.css">
    </head>

    <body>
        <div id="container"></div>
    </body>

    <script src="../../js/Three.min.js"></script>
    <script src="../../js/Detector.js"></script>

    <script type="x-shader/x-vertex" id="vertexShader">
        // Vertex Shader code

        void main() {
            gl_Position = vec4(position.xy, 1.0, 1.0);
        }
    </script>

    <script type="x-shader/x-fragment" id="fragmentShader">
        // Fragment Shader code

        uniform vec2 uResolution;
        uniform float uGlobalTime;
        uniform vec4 uMouse;
        uniform sampler2D uTexture0;
        uniform samplerCube uTexture1;

        vec3 ambientColor = vec3(0.8, 0.6, 0.4);
        vec3 diffuseColor = vec3(1.6, 1.2, 0.8);
        vec3 specularColor = vec3(1.2, 0.75, 0.3);
        vec3 light1Dir = normalize(vec3(2.35, 5.0, 1.5));
        vec3 light2Dir = normalize(vec3(0.55, 1.8, 1.5));

        float sphereRadius = 1.0;
        vec3 spherePos = vec3(0.0, sphereRadius, 0.5);

        float raytraceSphere(in vec3 ro, in vec3 rd, float tmin, float tmax) {
            vec3 ce = ro - spherePos;
            float b = dot(rd, ce);
            float c = dot(ce, ce) - (sphereRadius * sphereRadius);
            float t = b * b - c;
            if (t > tmin) {
                t = -b - sqrt(t);
                if (t < tmax)
                    return t;
            }
            return -1.0;
        }

        float specular(in vec3 rd, in vec3 norm, in vec3 lightDir, float roughness, float fresnel) {
            // Cook Torrance model: http://en.wikipedia.org/wiki/Specular_highlight
            // http://ruh.li/GraphicsCookTorrance.html

            float NdotL = dot(norm, lightDir);
            float NdotV = dot(norm, -rd);

            float spe = 0.0;
            if (NdotL > 0.0 && NdotV > 0.0) {

                vec3 h = normalize(-rd + lightDir);

                float NdotH = max(dot(norm, h), 0.0);
                float VdotH = max(dot(-rd, h), 0.000001);
                float LdotH = max(dot(lightDir, h), 0.000001);

                // Beckmann distribution (microfacet distribution function)
                float cos2a = NdotH * NdotH;
                float tan2a = (cos2a - 1.0) / cos2a;
                float r = max(roughness, 0.01);
                float r2 = r * r;
                float D = exp(tan2a / r2) / (r2 * cos2a * cos2a);

                // Fresnel term - Schlick approximation
                float F = fresnel + (1.0 - fresnel) * pow(1.0 - VdotH, 5.0);

                // Geometric attenuation term
                float g = 2.0 * NdotH / VdotH;
                float G = min(1.0, g * min(NdotV, NdotL));

                // Cook Torrance
                spe = D * F * G / (4.0 * NdotV * NdotL);
            }

            return spe;
        }

        void main() {
            vec2 p = (-uResolution.xy + 2.0 * gl_FragCoord.xy) / uResolution.y;

            // eye rotation
            vec3 eye = vec3(0.0, 1.0, 2.0);
            vec2 rot = 6.2831 * (vec2(0.6 + uGlobalTime * 0.025, sin(uGlobalTime * 0.1) * 0.06) + vec2(1.0, 0.0) * (uMouse.xy - uResolution.xy * 0.25) / uResolution.x);
            eye.yz = cos(rot.y) * eye.yz + sin(rot.y) * eye.zy * vec2(-1.0, 1.0);
            eye.xz = cos(rot.x) * eye.xz + sin(rot.x) * eye.zx * vec2(1.0, -1.0);

            // origin displacement and view direction
            vec3 ro = eye;
            vec3 ta = vec3(0.0, 1.0, 0.0);

            // build camera matrix, I suggest reading the following for camera to world transformation:
            // http://www.cs.toronto.edu/~jepson/csc2503/readings/Camera.pdf (chapter 6.5)
            vec3 cw = normalize(ta - eye);
            vec3 cu = normalize(cross(vec3(0.0, 1.0, 0.0), cw));
            vec3 cv = normalize(cross(cw, cu));
            mat3 cam = mat3(cu, cv, cw);

            // compute ray direction
            vec3 rd = cam * normalize(vec3(p.xy, 1.0));

            vec3 norm;
            vec3 color = textureCube(uTexture1, rd).xyz;
            float occ = 1.0;

            float tmin = 0.1;
            float tmax = 50.0;

            // raytrace the sphere
            float tsph = raytraceSphere(ro, rd, tmin, tmax);
            if (tsph > tmin) {
                vec3 pos = ro + rd * tsph;
                norm = normalize(pos - spherePos);
                occ = 0.5 + 0.5 * norm.y;

                float roughness = 0.15;
                float fresnel = 0.85;

                float amb = clamp(0.5 + 0.5 * norm.y, 0.0, 1.0);
                float dif1 = clamp(dot(light1Dir, norm), 0.0, 1.0);
                float spe1 = specular(rd, norm, light1Dir, roughness, fresnel);
                float dif2 = clamp(dot(light2Dir, norm), 0.0, 1.0);
                float spe2 = specular(rd, norm, light2Dir, roughness, fresnel);
                float fre = fresnel + (1.0 - fresnel) * pow(1.0 - dot(norm, -rd), 5.0);

                vec3 light1Color = dif1 * diffuseColor;
                light1Color += dif1 * spe1 * specularColor * occ;
                vec3 light2Color = dif2 * diffuseColor;
                light2Color += dif2 * spe2 * specularColor * occ;

                vec3 rgb = textureCube(uTexture1, reflect(rd, norm)).xyz;
                rgb = mix(rgb, vec3(0.2, 0.3, 0.4), 0.35);
                vec2 uv = vec2(atan(norm.x, norm.z), acos(norm.y));
                color = texture2D(uTexture0, uv).xyz * occ;

                color += amb * ambientColor * occ + light1Color + light2Color;
                color *= pow(rgb, vec3(5.0)) * fre;

                vec3 gamma = vec3(1.0 / 2.2);
                color = pow(color, gamma);
            }

            gl_FragColor = vec4(color, 1.0);
        }
    </script>

    <script type="text/javascript" id="mainCode">
        var container,
            renderer,
            scene,
            mesh,
            camera,
            leftMouseButtonDown = false,
            clock = new THREE.Clock();

        window.addEventListener('resize', onWindowResize, false);
        window.addEventListener('load', function() {

            var cubeMapImage = new Image();
            cubeMapImage.src = "textures/cube01.jpg";

        function getCubeMapUrls() {

            // We use the following mapping scheme to reference the tiles in the source image:
            // Full cubemap tiles     xyz positions          Required tile sequence
            // [ 0] [ 3] [ 6] [ 9]    [  ] [py] [  ] [  ]    [ ] [2] [ ] [ ]
            // [ 1] [ 4] [ 7] [10]    [nx] [pz] [px] [nz]    [1] [4] [0] [5]
            // [ 2] [ 5] [ 8] [11]    [  ] [ny] [  ] [  ]    [ ] [3] [ ] [ ]
            var cubeFaceIndices = [ 7, 1, 3, 5, 4, 10 ]; // xpos, xneg, ypos, yneg, zpos, zneg

            var cubeMapPieces = [];
            var textureWidth = cubeMapImage.width / 4;
            var textureHeight = cubeMapImage.height / 3;
            for(var x = 0; x < 4; x++) {
                for(var y = 0; y < 3; y++) {
                    var canvas = document.createElement('canvas');
                    canvas.width  = textureWidth;
                    canvas.height = textureHeight;
                    var context2d = canvas.getContext('2d');
                    context2d.drawImage(cubeMapImage, x * textureWidth, y * textureHeight, textureWidth, textureHeight, 0, 0, canvas.width, canvas.height);
                    cubeMapPieces.push(canvas.toDataURL());
                }
            }
            var urls = [];
            for (var i = 0; i < 6; i++) { // select the right tiles for the 6 different faces of the cubemap
                urls.push(cubeMapPieces[cubeFaceIndices[i]]);
            }
            return urls;
        }

            // grab the container from the DOM
            container = document.getElementById("container");

            // create a scene
            scene = new THREE.Scene();

            // create a camera the size of the browser window
            camera = new THREE.PerspectiveCamera(
                90,
                window.innerWidth / window.innerHeight,
                1,
                10000);
            camera.position.z = 200;

            // add the camera to the scene
            scene.add(camera);

            // load texture
            var tex0 = THREE.ImageUtils.loadTexture("textures/tex00.jpg");
            tex0.wrapS = tex0.wrapT = THREE.RepeatWrapping;

            // create a shader material
            material = new THREE.ShaderMaterial({
                uniforms: {
                    uResolution: { type:"v2", value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
                    uGlobalTime: { type:"f", value: 1.0 },
                    uMouse: { type:"v4", value: new THREE.Vector4(0, 0, 0, 0) },
                    uTexture0: { type:"t", value: tex0 },
                    uTexture1: { type: "t", value: THREE.ImageUtils.loadTextureCube(getCubeMapUrls()) }
                },
                vertexShader: document.getElementById('vertexShader').textContent,
                fragmentShader: document.getElementById('fragmentShader').textContent,
                depthTest: false
            });

            // create a plane mesh and assign the material, then add the mesh to the scene (fullscreen quad)
            mesh = new THREE.Mesh(
                new THREE.PlaneBufferGeometry(2, 2),
                material
            );
            scene.add(mesh);

            // create the renderer and attach it to the DOM
            if (Detector.webgl)
                renderer = new THREE.WebGLRenderer({
                    alpha: true,
                    antialias:true
                });
            else
                renderer = new THREE.CanvasRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);

            container.appendChild(renderer.domElement);

            document.addEventListener('mousedown', onMouseDown, false);
            document.addEventListener('mouseup', onMouseUp, false);
            document.addEventListener('mousemove', onMouseMove, false);

            render();
        });

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            material.uniforms["uResolution"].value = new THREE.Vector2(window.innerWidth, window.innerHeight);
        }

        function onMouseDown(e) {
            if (e.button === 0) {
                leftMouseButtonDown = true;
            }
            var vec4Mouse = material.uniforms["uMouse"].value;
            vec4Mouse.z = e.clientX;
            vec4Mouse.w = e.clientY;
        }

        function onMouseUp(e) {
            if (e.button === 0) {
                leftMouseButtonDown = false;
            } else {
                var vec4Mouse = material.uniforms["uMouse"].value;
                vec4Mouse.z = 0.0;
                vec4Mouse.w = 0.0;
            }
        }

        function onMouseMove(e) {
            if (leftMouseButtonDown === true) {
                var vec4Mouse = material.uniforms["uMouse"].value;
                vec4Mouse.x = e.clientX;
                vec4Mouse.y = e.clientY;
            }
        }

        function render() {
            material.uniforms["uGlobalTime"].value = clock.getElapsedTime();

            renderer.render(scene, camera);
            requestAnimationFrame(render);
        }
    </script>

</html>
