<html lang="en">
    <head>
        <title>WebGL/GLSL - Stars Pixel Shader</title>
        <meta charset="utf-8">
        <link rel="stylesheet" type="text/css" href="../css/styles.css">
    </head>

    <body>
        <div id="container"></div>
    </body>

    <script src="../js/Three.min.js"></script>
    <script src="../js/Detector.js"></script>

    <script type="x-shader/x-vertex" id="vertexShader">
        // Vertex Shader code

        void main() {
            gl_Position = vec4(position.xy, 1.0, 1.0);
        }
    </script>

    <script type="x-shader/x-fragment" id="fragmentShader">
        // Fragment Shader code

        uniform vec2 uResolution;
        uniform float uGlobalTime;
        uniform vec4 uMouse;
        uniform sampler2D uTexture0;

        vec3 sunColor = vec3(1.8, 1.0, 0.6);
        vec3 sunLightColor = vec3(1.7, 1.25, 0.9);
        vec3 sunDirection = normalize(vec3(-0.2, -1.0, 1.0));
        float maxmipmap = 100.0;

        float noise2d(in vec2 p) {
            vec2 i = floor(p);
            vec2 f = fract(p);
            f = f * f * (3.0 - 2.0 * f);
            vec2 uv = i + f + vec2(128.0, 128.0);
            float h = texture2D(uTexture0, uv / 256.0, 0.0 - maxmipmap).r;
            return h * 2.0 - 1.0;
        }

        float fBm(in vec2 p) {
            float sum = 0.0;
            float amp = 1.0;
            for(int i = 0; i < 4; i++) {
                sum += amp * noise2d(p);
                amp *= 0.5;
                p *= 2.0;
            }
            return sum;
        }

        float raymarchSphere(in vec3 ro, in vec3 rd, in float tmin, in float tmax) {
            float t = tmin;
            for (int i = 0; i < 500; i++) {
                vec3 p = ro + vec3(0.0, 4.0, 0.0) + rd * t;
                p.y *= 0.25;
                float d = length(p) - 0.5 - 0.25 * fBm(p.xz);
                if (d < (0.001 * t) || t > tmax)
                    break;
                t += 0.5 * d;
            }
            return t;
        }

        float F(in vec2 p) {
             return 0.5 - 0.25 * fBm(p);
        }

        vec3 getRockNormal(in vec3 p, float t) {
            float eps = 0.025;
            return normalize(vec3(F(vec2(p.x - eps, p.z)) - F(vec2(p.x + eps, p.z)),
                                  2.0 * eps,
                                  F(vec2(p.x, p.z - eps)) - F(vec2(p.x, p.z + eps))));
        }

        float raymarchShadow(in vec3 ro, in vec3 rd, float tmin, float tmax) {
            float sh = 1.0;
            float t = tmin;
            for(int i = 0; i < 50; i++) {
                vec3 p = ro + vec3(0.0, 4.0, 0.0) + rd * t;
                p.y *= 0.25;
                float d = length(p) - 0.5 - 0.25 * fBm(p.xz);
                sh = min(sh, 16.0 * d / t);
                t += 0.5 * d;
                if (d < (0.001 * t) || t > tmax)
                    break;
            }
            return sh;
        }

        float raymarchAO(in vec3 ro, in vec3 rd, float tmin) {
            float ao = 0.0;
            for (float i = 0.0; i < 5.0; i++) {
                float t = tmin + pow(i / 5.0, 2.0);
                vec3 p = ro + vec3(0.0, 4.0, 0.0) + rd * t;
                p.y *= 0.25;
                float d = length(p) - 0.5 - 0.25 * fBm(p.xz);
                ao += max(0.0, t - 0.5 * d - 0.05);
            }
            return 1.0 - 0.5 * ao;
        }

        void main() {
            vec2 p = gl_FragCoord.xy / uResolution.xy * 2.0 - 1.0;

            // eye rotation
            vec3 eye = vec3(0.0, 0.0, 1.0);
            vec2 rot = 6.2831 * (vec2(0.0, 0.0) + vec2(1.0, 0.25) * (uMouse.xy - uResolution.xy * 0.5) / uResolution.x);
            eye.yz = cos(rot.y) * eye.yz + sin(rot.y) * eye.zy * vec2(-1.0, 1.0);
            eye.xz = cos(rot.x) * eye.xz + sin(rot.x) * eye.zx * vec2(1.0, -1.0);

            // origin displacement and view direction
            vec3 ro = eye; // + vec3(cos(uGlobalTime * 0.1) * 1.0, sin(uGlobalTime * 0.1) * 0.5 + 0.15, uGlobalTime * 0.5);
            vec3 ta = vec3(0.0, -2.5, 0.0);

            // build camera matrix, I suggest reading the following for camera to world transformation:
            // http://www.cs.toronto.edu/~jepson/csc2503/readings/Camera.pdf (chapter 6.5)
            vec3 cw = normalize(ta - eye);
            vec3 cu = normalize(cross(vec3(0.0, 1.0, 0.0), cw));
            vec3 cv = normalize(cross(cw, cu));
            mat3 cam = mat3(cu, cv, cw);

            // compute ray direction
            vec3 rd = cam * normalize(vec3(p.xy, 1.0));

            float sun = clamp(dot(sunDirection, rd), 0.0, 2.0);

            vec3 color = vec3(0.0);

            float tmin = 0.1;
            float tmax = 50.0;
            float t = raymarchSphere(ro, rd, tmin, tmax);
            if (t > 0.0 && t < tmax) {
                vec3 tpos = ro + rd * t;
                vec3 tnorm = getRockNormal(tpos, t);

                color = vec3(0.01, 0.01 ,0.02);
                color = mix(color, texture2D(uTexture0, tpos.xz, -100.0).rgb * 0.5, 0.05);

                float occ = clamp(raymarchAO(tpos, tnorm, 0.1), 0.0, 1.0);
                float sha = 0.015 + clamp(raymarchShadow(tpos, sunDirection, 0.5, 50.0), 0.0, 1.0);
                vec3 lightColor = 1.2 * sun * sunLightColor * occ; // sunlight
                lightColor *= pow(vec3(sha), vec3(1.0, 1.0, 1.0)); // multiply sunlight by penumbra shadows

                //color = tnorm;
                color *= 1.5 * lightColor;
            } else {
                // stars
                rd.z += uGlobalTime * 0.0009;
                float s = noise2d(rd.xz * 128.0);
                s += noise2d(rd.xz * 382.0);
                s += noise2d(rd.xz * 768.0);
                s *= 0.0000000001 * pow(s, 28.0);
                if (s > 0.0) {
                    vec3 star = vec3(s);
                    color += star;
                }
            }

            // sun
            color += (pow(sun, 2000.0) + 0.25 * pow(sun, 800.0) + 0.005 * pow(sun, 200.0)) * vec3(32.0, 26.0, 5.0);

            // gamma correction
            vec3 gamma = vec3(1.0 / 2.2);
            gl_FragColor = vec4(pow(color, gamma), 1.0);
        }
    </script>

    <script type="text/javascript" id="mainCode">
        var container,
            renderer,
            scene,
            mesh,
            camera,
            leftMouseButtonDown = false,
            clock = new THREE.Clock();

        window.addEventListener('resize', onWindowResize, false);
        window.addEventListener('load', function() {

            // grab the container from the DOM
            container = document.getElementById("container");

            // create a scene
            scene = new THREE.Scene();

            // create a camera the size of the browser window
            camera = new THREE.PerspectiveCamera(
                90,
                window.innerWidth / window.innerHeight,
                1,
                10000);
            camera.position.z = 200;

            // add the camera to the scene
            scene.add(camera);

            // load noise texture
            var tex0 = THREE.ImageUtils.loadTexture("textures/noise2d.png");
            tex0.wrapS = tex0.wrapT = THREE.RepeatWrapping;

            // create a shader material
            material = new THREE.ShaderMaterial({
                uniforms: {
                    uResolution: { type:"v2", value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
                    uGlobalTime: { type:"f", value: 1.0 },
                    uMouse: { type:"v4", value: new THREE.Vector4(0, 0, 0, 0) },
                    uTexture0: { type:"t", value: tex0 }
                },
                vertexShader: document.getElementById('vertexShader').textContent,
                fragmentShader: document.getElementById('fragmentShader').textContent,
                depthTest: false
            });

            // create a plane mesh and assign the material, then add the mesh to the scene (fullscreen quad)
            mesh = new THREE.Mesh(
                new THREE.PlaneBufferGeometry(2, 2),
                material
            );
            scene.add(mesh);

            // create the renderer and attach it to the DOM
            if (Detector.webgl)
                renderer = new THREE.WebGLRenderer({
                    alpha: true,
                    antialias:true
                });
            else
                renderer = new THREE.CanvasRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);

            container.appendChild(renderer.domElement);

            document.addEventListener('mousedown', onMouseDown, false);
            document.addEventListener('mouseup', onMouseUp, false);
            document.addEventListener('mousemove', onMouseMove, false);

            render();
        });

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            material.uniforms["uResolution"].value = new THREE.Vector2(window.innerWidth, window.innerHeight);
        }

        function onMouseDown(e) {
            if (e.button === 0) {
                leftMouseButtonDown = true;
            }
            var vec4Mouse = material.uniforms["uMouse"].value;
            vec4Mouse.z = e.clientX;
            vec4Mouse.w = e.clientY;
        }

        function onMouseUp(e) {
            if (e.button === 0) {
                leftMouseButtonDown = false;
            } else {
                var vec4Mouse = material.uniforms["uMouse"].value;
                vec4Mouse.z = 0.0;
                vec4Mouse.w = 0.0;
            }
        }

        function onMouseMove(e) {
            if (leftMouseButtonDown === true) {
                var vec4Mouse = material.uniforms["uMouse"].value;
                vec4Mouse.x = e.clientX;
                vec4Mouse.y = e.clientY;
            }
        }

        function render() {
            material.uniforms["uGlobalTime"].value = clock.getElapsedTime();

            renderer.render(scene, camera);
            requestAnimationFrame(render);
        }
    </script>

</html>
