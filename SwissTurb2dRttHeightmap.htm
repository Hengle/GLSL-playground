<html lang="en">
    <head>
        <title>WebGL/GLSL - Perlin 2D (Inigo Quilez's variant) heightmap rendered to texture</title>
        <meta charset="utf-8">
    </head>

    <body>
        <div id="container"></div>
    </body>

    <script src="js/Three.min.js"></script>
    <script src="js/OrbitControls.js"></script>
    <script src="js/Prototype.js"></script>
    <script src="js/NoiseRTT.js"></script>

    <script type="x-shader/x-vertex" id="noiseVertexShader">
        // Vertex Shader code

        varying vec2 v_texCoord2D;

        void main() {
            gl_Position = vec4(position.xy, 0.0, 1.0);
            v_texCoord2D = position.xy;
        }
    </script>

    <script type="x-shader/x-fragment" id="noiseFragmentShader">
        // Fragment Shader code

        uniform float seed;
        uniform vec2 uvScale;
        uniform vec2 offset;

        varying vec2 v_texCoord2D;

        //
        // GLSL textureless IQ perlin 2D noise "pnoise".
        //
        // Pseudo derivatives are applied to noise as per
        // Giliam de Carpentier suggested here: http://www.decarpentier.nl/scape-procedural-extensions
        //
        // Author:  Stefan Gustavson (stefan.gustavson@liu.se)
        // Version: 2011-08-22
        //
        // Many thanks to Ian McEwan of Ashima Arts for the
        // ideas for permutation and gradient selection.
        //
        // Copyright (c) 2011 Stefan Gustavson. All rights reserved.
        // Distributed under the MIT license. See LICENSE file.
        // https://github.com/ashima/webgl-noise
        //

        vec4 mod289(vec4 x) {
            return x - floor(x * (1.0 / 289.0)) * 289.0;
        }

        vec4 permute(vec4 x) {
            return mod289(((x*34.0)+1.0)*x);
        }

        vec4 taylorInvSqrt(vec4 r) {
            return 1.79284291400159 - 0.85373472095314 * r;
        }

        vec2 fade(vec2 t) {
            return t*t*t*(t*(t*6.0-15.0)+10.0);
        }

        // Classic Perlin noise
        vec3 pnoise(vec2 P) {
            vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
            vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
            Pi = mod289(Pi); // To avoid truncation effects in permutation
            vec4 ix = Pi.xzxz;
            vec4 iy = Pi.yyww;
            vec4 fx = Pf.xzxz;
            vec4 fy = Pf.yyww;

            vec4 i = permute(permute(ix) + iy) + seed;

            vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
            vec4 gy = abs(gx) - 0.5 ;
            vec4 tx = floor(gx + 0.5);
            gx = gx - tx;

            vec2 g00 = vec2(gx.x,gy.x);
            vec2 g10 = vec2(gx.y,gy.y);
            vec2 g01 = vec2(gx.z,gy.z);
            vec2 g11 = vec2(gx.w,gy.w);

            vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
            g00 *= norm.x;
            g01 *= norm.y;
            g10 *= norm.z;
            g11 *= norm.w;

            float n00 = dot(g00, vec2(fx.x, fy.x));
            float n10 = dot(g10, vec2(fx.y, fy.y));
            float n01 = dot(g01, vec2(fx.z, fy.z));
            float n11 = dot(g11, vec2(fx.w, fy.w));

            vec2 fade_xy = fade(Pf.xy);
            vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
            float n_xy = mix(n_x.x, n_x.y, fade_xy.y);

            // Get the derivative dw/df
            vec2 dw = Pf.xy * Pf.xy * (Pf.xy * (Pf.xy * 30.0 - 60.0) + 30.0); // 30f^4 - 60f^3 + 30f^2
            // Get the derivative d(w*f)/df
            vec2 dwp = Pf.xy * Pf.xy * Pf.xy * (Pf.xy * (Pf.xy * 36.0 - 75.0) + 40.0); // 36f^5 - 75f^4 + 40f^3

            // Calculate the derivatives dn/dx and dn/dy
            float dx = (g00.x + (g01.x - g00.x) * fade_xy.y) + ((g10.y - g10.x) * Pf.y - g00.y +
               ((g10.x - g10.y - g11.x + g11.y) * Pf.y + g00.y + g11.x - g01.y - g11.y) * fade_xy.y) *
               dw.x + ((g00.y - g00.x) + (g00.x - g00.y - g01.x + g01.y) * fade_xy.y) * dwp.x;
            float dy = (g10.x + (g10.y - g10.x) * fade_xy.x) + ((g01.x - g00.x) * Pf.x - g11.x + ((g00.x -
               g00.y - g01.x + g01.y) * Pf.x + g00.y + g11.x - g01.y - g11.y) * fade_xy.x) * dw.y +
               ((g11.x - g10.x) + (g10.x - g10.y - g11.x + g11.y) * fade_xy.x) * dwp.y;

            // Also return the pseudo dn/dx and dn/dy, scaled by the same factor
            return 2.3 * vec3(n_xy, dx, dy);
        }

        // fractional brownian motion, also called turbulence
        float fBm(vec2 P, float lacunarity, float gain) {
            float warp = 0.15;
            float sum = 0.0;
            vec2 dsum = vec2(0.0);
            float amp = 1.0;
            vec2 pp = P;

            // 6 octaves of noise
            for(int i = 0; i < 6; i++) {
                vec3 n = pnoise(pp + warp * dsum);
                sum += (amp * (1.0 - abs(n.x)));
                dsum += amp * n.yz * -n.x;
                amp *= gain * clamp(sum, 0.0, 1.0);
                pp *= lacunarity;
            }
            return sum;
        }

        void main() {
            vec2 uv = (v_texCoord2D + offset) * uvScale;
            float h = fBm(uv, 2.0, 0.6);
            gl_FragColor = vec4(0.33 * vec3(h), 1.0);
        }
    </script>

    <script type="x-shader/x-vertex" id="displayVertexShader">
        // Vertex Shader code

        uniform sampler2D heightmapTexture;
        varying float height;

        void main() {
            // lookup for height on the texture map, taking red channel as height.
            height = texture2D(heightmapTexture, uv).x;
            // apply a factor to get displacement
            float displacement = height * 1500.0;
            // displace the vertex
            vec3 newPosition = vec3(position.x, position.y, position.z + displacement);
            gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);
        }
    </script>

    <script type="x-shader/x-fragment" id="displayFragmentShader">
        // Fragment Shader code

        varying float height;

        void main() {
            gl_FragColor = vec4(0.0, 0.0, height, 1.0);
        }
    </script>

    <script type="text/javascript" id="mainCode">
        var container,
            renderer,
            scene,
            material,
            mesh,
            camera,
            fov = 60,
            noiseRTT,
            clock = new THREE.Clock();

        window.addEventListener('load', function() {

            // grab the container from the DOM
            container = document.getElementById("container");

            // create the renderer and attach it to the DOM
            renderer = new THREE.WebGLRenderer();
            renderer.setPixelRatio(window.devicePixelRatio);
            // set a black background color
            renderer.setClearColor(0);

            container.appendChild(renderer.domElement);

            // create a scene
            scene = new THREE.Scene();

            // create axis helpers and add them to the scene
            var axes = new THREE.AxisHelper(200);
            scene.add(axes);

            // create a camera the size of the browser window
            camera = new THREE.PerspectiveCamera(
                fov,
                window.innerWidth / window.innerHeight,
                1,
                20000);
            camera.position.y = -4000;
            camera.position.z = 3500;

            // controls
            controls = new THREE.OrbitControls(camera);
            controls.center.set(0.0, 100.0, 0.0);
            controls.userPanSpeed = 100;

            // add the camera to the scene
            scene.add(camera);

            // initialize noiseRTT
            var sizeX = 256;
            var sizeY = 256;
            var noiseScale = 2.0;
            var seed = 92473;
            noiseRTT = new NoiseRTT(sizeX, sizeY, noiseScale, seed);

            // create a shader material
            material = new THREE.ShaderMaterial({
                wireframe: true,
                uniforms: {
                    heightmapTexture: { type: "t", value: noiseRTT.getTexture() },
                },
                vertexShader: document.getElementById('displayVertexShader').textContent,
                fragmentShader: document.getElementById('displayFragmentShader').textContent
            });

            // create a plane mesh and assign the material, then add the mesh to the scene
            mesh = new THREE.Mesh(
                new THREE.PlaneBufferGeometry(6000, 6000, 256, 256),
                material
            );
            scene.add(mesh);

            render();
        });

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize( window.innerWidth, window.innerHeight );
        }

        function render() {
            controls.update(clock.getDelta());

            // render noise to texture
            renderer.setSize(256, 256);
            noiseRTT.render(renderer, 0, 0);

            // render scene
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.render(scene, camera);

            requestAnimationFrame(render);
        }
    </script>

</html>
